{
  "version": 3,
  "sources": ["../../../../../../node_modules/@tiptap/extension-bold/dist/index.js"],
  "sourcesContent": ["import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\n\n/**\n * Matches bold text via `**` as input.\n */\nconst starInputRegex = /(?:^|\\s)(\\*\\*(?!\\s+\\*\\*)((?:[^*]+))\\*\\*(?!\\s+\\*\\*))$/;\n/**\n * Matches bold text via `**` while pasting.\n */\nconst starPasteRegex = /(?:^|\\s)(\\*\\*(?!\\s+\\*\\*)((?:[^*]+))\\*\\*(?!\\s+\\*\\*))/g;\n/**\n * Matches bold text via `__` as input.\n */\nconst underscoreInputRegex = /(?:^|\\s)(__(?!\\s+__)((?:[^_]+))__(?!\\s+__))$/;\n/**\n * Matches bold text via `__` while pasting.\n */\nconst underscorePasteRegex = /(?:^|\\s)(__(?!\\s+__)((?:[^_]+))__(?!\\s+__))/g;\n/**\n * This extension allows you to mark text as bold.\n * @see https://tiptap.dev/api/marks/bold\n */\nconst Bold = Mark.create({\n  name: 'bold',\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'strong'\n    }, {\n      tag: 'b',\n      getAttrs: node => node.style.fontWeight !== 'normal' && null\n    }, {\n      style: 'font-weight',\n      getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['strong', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setBold: () => ({\n        commands\n      }) => {\n        return commands.setMark(this.name);\n      },\n      toggleBold: () => ({\n        commands\n      }) => {\n        return commands.toggleMark(this.name);\n      },\n      unsetBold: () => ({\n        commands\n      }) => {\n        return commands.unsetMark(this.name);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-b': () => this.editor.commands.toggleBold(),\n      'Mod-B': () => this.editor.commands.toggleBold()\n    };\n  },\n  addInputRules() {\n    return [markInputRule({\n      find: starInputRegex,\n      type: this.type\n    }), markInputRule({\n      find: underscoreInputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules() {\n    return [markPasteRule({\n      find: starPasteRegex,\n      type: this.type\n    }), markPasteRule({\n      find: underscorePasteRegex,\n      type: this.type\n    })];\n  }\n});\nexport { Bold, Bold as default, starInputRegex, starPasteRegex, underscoreInputRegex, underscorePasteRegex };\n"],
  "mappings": ";;;;;;;;;AAKA,IAAM,iBAAiB;AAIvB,IAAM,iBAAiB;AAIvB,IAAM,uBAAuB;AAI7B,IAAM,uBAAuB;AAK7B,IAAM,OAAO,KAAK,OAAO;AAAA,EACvB,MAAM;AAAA,EACN,aAAa;AACX,WAAO;AAAA,MACL,gBAAgB,CAAC;AAAA,IACnB;AAAA,EACF;AAAA,EACA,YAAY;AACV,WAAO,CAAC;AAAA,MACN,KAAK;AAAA,IACP,GAAG;AAAA,MACD,KAAK;AAAA,MACL,UAAU,UAAQ,KAAK,MAAM,eAAe,YAAY;AAAA,IAC1D,GAAG;AAAA,MACD,OAAO;AAAA,MACP,UAAU,WAAS,4BAA4B,KAAK,KAAK,KAAK;AAAA,IAChE,CAAC;AAAA,EACH;AAAA,EACA,WAAW;AAAA,IACT;AAAA,EACF,GAAG;AACD,WAAO,CAAC,UAAU,gBAAgB,KAAK,QAAQ,gBAAgB,cAAc,GAAG,CAAC;AAAA,EACnF;AAAA,EACA,cAAc;AACZ,WAAO;AAAA,MACL,SAAS,MAAM,CAAC;AAAA,QACd;AAAA,MACF,MAAM;AACJ,eAAO,SAAS,QAAQ,KAAK,IAAI;AAAA,MACnC;AAAA,MACA,YAAY,MAAM,CAAC;AAAA,QACjB;AAAA,MACF,MAAM;AACJ,eAAO,SAAS,WAAW,KAAK,IAAI;AAAA,MACtC;AAAA,MACA,WAAW,MAAM,CAAC;AAAA,QAChB;AAAA,MACF,MAAM;AACJ,eAAO,SAAS,UAAU,KAAK,IAAI;AAAA,MACrC;AAAA,IACF;AAAA,EACF;AAAA,EACA,uBAAuB;AACrB,WAAO;AAAA,MACL,SAAS,MAAM,KAAK,OAAO,SAAS,WAAW;AAAA,MAC/C,SAAS,MAAM,KAAK,OAAO,SAAS,WAAW;AAAA,IACjD;AAAA,EACF;AAAA,EACA,gBAAgB;AACd,WAAO,CAAC,cAAc;AAAA,MACpB,MAAM;AAAA,MACN,MAAM,KAAK;AAAA,IACb,CAAC,GAAG,cAAc;AAAA,MAChB,MAAM;AAAA,MACN,MAAM,KAAK;AAAA,IACb,CAAC,CAAC;AAAA,EACJ;AAAA,EACA,gBAAgB;AACd,WAAO,CAAC,cAAc;AAAA,MACpB,MAAM;AAAA,MACN,MAAM,KAAK;AAAA,IACb,CAAC,GAAG,cAAc;AAAA,MAChB,MAAM;AAAA,MACN,MAAM,KAAK;AAAA,IACb,CAAC,CAAC;AAAA,EACJ;AACF,CAAC;",
  "names": []
}
