{
  "version": 3,
  "sources": ["../../../../../../node_modules/@tiptap/extension-italic/dist/index.js"],
  "sourcesContent": ["import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\n\n/**\n * Matches an italic to a *italic* on input.\n */\nconst starInputRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))$/;\n/**\n * Matches an italic to a *italic* on paste.\n */\nconst starPasteRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))/g;\n/**\n * Matches an italic to a _italic_ on input.\n */\nconst underscoreInputRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))$/;\n/**\n * Matches an italic to a _italic_ on paste.\n */\nconst underscorePasteRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))/g;\n/**\n * This extension allows you to create italic text.\n * @see https://www.tiptap.dev/api/marks/italic\n */\nconst Italic = Mark.create({\n  name: 'italic',\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'em'\n    }, {\n      tag: 'i',\n      getAttrs: node => node.style.fontStyle !== 'normal' && null\n    }, {\n      style: 'font-style=italic'\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setItalic: () => ({\n        commands\n      }) => {\n        return commands.setMark(this.name);\n      },\n      toggleItalic: () => ({\n        commands\n      }) => {\n        return commands.toggleMark(this.name);\n      },\n      unsetItalic: () => ({\n        commands\n      }) => {\n        return commands.unsetMark(this.name);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-i': () => this.editor.commands.toggleItalic(),\n      'Mod-I': () => this.editor.commands.toggleItalic()\n    };\n  },\n  addInputRules() {\n    return [markInputRule({\n      find: starInputRegex,\n      type: this.type\n    }), markInputRule({\n      find: underscoreInputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules() {\n    return [markPasteRule({\n      find: starPasteRegex,\n      type: this.type\n    }), markPasteRule({\n      find: underscorePasteRegex,\n      type: this.type\n    })];\n  }\n});\nexport { Italic, Italic as default, starInputRegex, starPasteRegex, underscoreInputRegex, underscorePasteRegex };\n"],
  "mappings": ";;;;;;;;;;AAKA,IAAM,iBAAiB;AAIvB,IAAM,iBAAiB;AAIvB,IAAM,uBAAuB;AAI7B,IAAM,uBAAuB;AAK7B,IAAM,SAAS,KAAK,OAAO;AAAA,EACzB,MAAM;AAAA,EACN,aAAa;AACX,WAAO;AAAA,MACL,gBAAgB,CAAC;AAAA,IACnB;AAAA,EACF;AAAA,EACA,YAAY;AACV,WAAO,CAAC;AAAA,MACN,KAAK;AAAA,IACP,GAAG;AAAA,MACD,KAAK;AAAA,MACL,UAAU,UAAQ,KAAK,MAAM,cAAc,YAAY;AAAA,IACzD,GAAG;AAAA,MACD,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,WAAW;AAAA,IACT;AAAA,EACF,GAAG;AACD,WAAO,CAAC,MAAM,gBAAgB,KAAK,QAAQ,gBAAgB,cAAc,GAAG,CAAC;AAAA,EAC/E;AAAA,EACA,cAAc;AACZ,WAAO;AAAA,MACL,WAAW,MAAM,CAAC;AAAA,QAChB;AAAA,MACF,MAAM;AACJ,eAAO,SAAS,QAAQ,KAAK,IAAI;AAAA,MACnC;AAAA,MACA,cAAc,MAAM,CAAC;AAAA,QACnB;AAAA,MACF,MAAM;AACJ,eAAO,SAAS,WAAW,KAAK,IAAI;AAAA,MACtC;AAAA,MACA,aAAa,MAAM,CAAC;AAAA,QAClB;AAAA,MACF,MAAM;AACJ,eAAO,SAAS,UAAU,KAAK,IAAI;AAAA,MACrC;AAAA,IACF;AAAA,EACF;AAAA,EACA,uBAAuB;AACrB,WAAO;AAAA,MACL,SAAS,MAAM,KAAK,OAAO,SAAS,aAAa;AAAA,MACjD,SAAS,MAAM,KAAK,OAAO,SAAS,aAAa;AAAA,IACnD;AAAA,EACF;AAAA,EACA,gBAAgB;AACd,WAAO,CAAC,cAAc;AAAA,MACpB,MAAM;AAAA,MACN,MAAM,KAAK;AAAA,IACb,CAAC,GAAG,cAAc;AAAA,MAChB,MAAM;AAAA,MACN,MAAM,KAAK;AAAA,IACb,CAAC,CAAC;AAAA,EACJ;AAAA,EACA,gBAAgB;AACd,WAAO,CAAC,cAAc;AAAA,MACpB,MAAM;AAAA,MACN,MAAM,KAAK;AAAA,IACb,CAAC,GAAG,cAAc;AAAA,MAChB,MAAM;AAAA,MACN,MAAM,KAAK;AAAA,IACb,CAAC,CAAC;AAAA,EACJ;AACF,CAAC;",
  "names": []
}
