{
  "version": 3,
  "sources": ["../../../../../../node_modules/@tiptap/extension-code-block/dist/index.js"],
  "sourcesContent": ["import { Node, mergeAttributes, textblockTypeInputRule } from '@tiptap/core';\nimport { Selection, Plugin, PluginKey, TextSelection } from '@tiptap/pm/state';\n\n/**\n * Matches a code block with backticks.\n */\nconst backtickInputRegex = /^```([a-z]+)?[\\s\\n]$/;\n/**\n * Matches a code block with tildes.\n */\nconst tildeInputRegex = /^~~~([a-z]+)?[\\s\\n]$/;\n/**\n * This extension allows you to create code blocks.\n * @see https://tiptap.dev/api/nodes/code-block\n */\nconst CodeBlock = Node.create({\n  name: 'codeBlock',\n  addOptions() {\n    return {\n      languageClassPrefix: 'language-',\n      exitOnTripleEnter: true,\n      exitOnArrowDown: true,\n      defaultLanguage: null,\n      HTMLAttributes: {}\n    };\n  },\n  content: 'text*',\n  marks: '',\n  group: 'block',\n  code: true,\n  defining: true,\n  addAttributes() {\n    return {\n      language: {\n        default: this.options.defaultLanguage,\n        parseHTML: element => {\n          var _a;\n          const {\n            languageClassPrefix\n          } = this.options;\n          const classNames = [...(((_a = element.firstElementChild) === null || _a === void 0 ? void 0 : _a.classList) || [])];\n          const languages = classNames.filter(className => className.startsWith(languageClassPrefix)).map(className => className.replace(languageClassPrefix, ''));\n          const language = languages[0];\n          if (!language) {\n            return null;\n          }\n          return language;\n        },\n        rendered: false\n      }\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'pre',\n      preserveWhitespace: 'full'\n    }];\n  },\n  renderHTML({\n    node,\n    HTMLAttributes\n  }) {\n    return ['pre', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), ['code', {\n      class: node.attrs.language ? this.options.languageClassPrefix + node.attrs.language : null\n    }, 0]];\n  },\n  addCommands() {\n    return {\n      setCodeBlock: attributes => ({\n        commands\n      }) => {\n        return commands.setNode(this.name, attributes);\n      },\n      toggleCodeBlock: attributes => ({\n        commands\n      }) => {\n        return commands.toggleNode(this.name, 'paragraph', attributes);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-c': () => this.editor.commands.toggleCodeBlock(),\n      // remove code block when at start of document or code block is empty\n      Backspace: () => {\n        const {\n          empty,\n          $anchor\n        } = this.editor.state.selection;\n        const isAtStart = $anchor.pos === 1;\n        if (!empty || $anchor.parent.type.name !== this.name) {\n          return false;\n        }\n        if (isAtStart || !$anchor.parent.textContent.length) {\n          return this.editor.commands.clearNodes();\n        }\n        return false;\n      },\n      // exit node on triple enter\n      Enter: ({\n        editor\n      }) => {\n        if (!this.options.exitOnTripleEnter) {\n          return false;\n        }\n        const {\n          state\n        } = editor;\n        const {\n          selection\n        } = state;\n        const {\n          $from,\n          empty\n        } = selection;\n        if (!empty || $from.parent.type !== this.type) {\n          return false;\n        }\n        const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;\n        const endsWithDoubleNewline = $from.parent.textContent.endsWith('\\n\\n');\n        if (!isAtEnd || !endsWithDoubleNewline) {\n          return false;\n        }\n        return editor.chain().command(({\n          tr\n        }) => {\n          tr.delete($from.pos - 2, $from.pos);\n          return true;\n        }).exitCode().run();\n      },\n      // exit node on arrow down\n      ArrowDown: ({\n        editor\n      }) => {\n        if (!this.options.exitOnArrowDown) {\n          return false;\n        }\n        const {\n          state\n        } = editor;\n        const {\n          selection,\n          doc\n        } = state;\n        const {\n          $from,\n          empty\n        } = selection;\n        if (!empty || $from.parent.type !== this.type) {\n          return false;\n        }\n        const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;\n        if (!isAtEnd) {\n          return false;\n        }\n        const after = $from.after();\n        if (after === undefined) {\n          return false;\n        }\n        const nodeAfter = doc.nodeAt(after);\n        if (nodeAfter) {\n          return editor.commands.command(({\n            tr\n          }) => {\n            tr.setSelection(Selection.near(doc.resolve(after)));\n            return true;\n          });\n        }\n        return editor.commands.exitCode();\n      }\n    };\n  },\n  addInputRules() {\n    return [textblockTypeInputRule({\n      find: backtickInputRegex,\n      type: this.type,\n      getAttributes: match => ({\n        language: match[1]\n      })\n    }), textblockTypeInputRule({\n      find: tildeInputRegex,\n      type: this.type,\n      getAttributes: match => ({\n        language: match[1]\n      })\n    })];\n  },\n  addProseMirrorPlugins() {\n    return [\n    // this plugin creates a code block for pasted content from VS Code\n    // we can also detect the copied code language\n    new Plugin({\n      key: new PluginKey('codeBlockVSCodeHandler'),\n      props: {\n        handlePaste: (view, event) => {\n          if (!event.clipboardData) {\n            return false;\n          }\n          // donâ€™t create a new code block within code blocks\n          if (this.editor.isActive(this.type.name)) {\n            return false;\n          }\n          const text = event.clipboardData.getData('text/plain');\n          const vscode = event.clipboardData.getData('vscode-editor-data');\n          const vscodeData = vscode ? JSON.parse(vscode) : undefined;\n          const language = vscodeData === null || vscodeData === void 0 ? void 0 : vscodeData.mode;\n          if (!text || !language) {\n            return false;\n          }\n          const {\n            tr,\n            schema\n          } = view.state;\n          // prepare a text node\n          // strip carriage return chars from text pasted as code\n          // see: https://github.com/ProseMirror/prosemirror-view/commit/a50a6bcceb4ce52ac8fcc6162488d8875613aacd\n          const textNode = schema.text(text.replace(/\\r\\n?/g, '\\n'));\n          // create a code block with the text node\n          // replace selection with the code block\n          tr.replaceSelectionWith(this.type.create({\n            language\n          }, textNode));\n          if (tr.selection.$from.parent.type !== this.type) {\n            // put cursor inside the newly created code block\n            tr.setSelection(TextSelection.near(tr.doc.resolve(Math.max(0, tr.selection.from - 2))));\n          }\n          // store meta information\n          // this is useful for other plugins that depends on the paste event\n          // like the paste rule plugin\n          tr.setMeta('paste', true);\n          view.dispatch(tr);\n          return true;\n        }\n      }\n    })];\n  }\n});\nexport { CodeBlock, backtickInputRegex, CodeBlock as default, tildeInputRegex };\n"],
  "mappings": ";;;;;;;;;;;;;AAMA,IAAM,qBAAqB;AAI3B,IAAM,kBAAkB;AAKxB,IAAM,YAAY,KAAK,OAAO;AAAA,EAC5B,MAAM;AAAA,EACN,aAAa;AACX,WAAO;AAAA,MACL,qBAAqB;AAAA,MACrB,mBAAmB;AAAA,MACnB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,gBAAgB,CAAC;AAAA,IACnB;AAAA,EACF;AAAA,EACA,SAAS;AAAA,EACT,OAAO;AAAA,EACP,OAAO;AAAA,EACP,MAAM;AAAA,EACN,UAAU;AAAA,EACV,gBAAgB;AACd,WAAO;AAAA,MACL,UAAU;AAAA,QACR,SAAS,KAAK,QAAQ;AAAA,QACtB,WAAW,aAAW;AACpB,cAAI;AACJ,gBAAM;AAAA,YACJ;AAAA,UACF,IAAI,KAAK;AACT,gBAAM,aAAa,CAAC,KAAM,KAAK,QAAQ,uBAAuB,QAAQ,OAAO,SAAS,SAAS,GAAG,cAAc,CAAC,CAAE;AACnH,gBAAM,YAAY,WAAW,OAAO,eAAa,UAAU,WAAW,mBAAmB,CAAC,EAAE,IAAI,eAAa,UAAU,QAAQ,qBAAqB,EAAE,CAAC;AACvJ,gBAAM,WAAW,UAAU,CAAC;AAC5B,cAAI,CAAC,UAAU;AACb,mBAAO;AAAA,UACT;AACA,iBAAO;AAAA,QACT;AAAA,QACA,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA,YAAY;AACV,WAAO,CAAC;AAAA,MACN,KAAK;AAAA,MACL,oBAAoB;AAAA,IACtB,CAAC;AAAA,EACH;AAAA,EACA,WAAW;AAAA,IACT;AAAA,IACA;AAAA,EACF,GAAG;AACD,WAAO,CAAC,OAAO,gBAAgB,KAAK,QAAQ,gBAAgB,cAAc,GAAG,CAAC,QAAQ;AAAA,MACpF,OAAO,KAAK,MAAM,WAAW,KAAK,QAAQ,sBAAsB,KAAK,MAAM,WAAW;AAAA,IACxF,GAAG,CAAC,CAAC;AAAA,EACP;AAAA,EACA,cAAc;AACZ,WAAO;AAAA,MACL,cAAc,gBAAc,CAAC;AAAA,QAC3B;AAAA,MACF,MAAM;AACJ,eAAO,SAAS,QAAQ,KAAK,MAAM,UAAU;AAAA,MAC/C;AAAA,MACA,iBAAiB,gBAAc,CAAC;AAAA,QAC9B;AAAA,MACF,MAAM;AACJ,eAAO,SAAS,WAAW,KAAK,MAAM,aAAa,UAAU;AAAA,MAC/D;AAAA,IACF;AAAA,EACF;AAAA,EACA,uBAAuB;AACrB,WAAO;AAAA,MACL,aAAa,MAAM,KAAK,OAAO,SAAS,gBAAgB;AAAA;AAAA,MAExD,WAAW,MAAM;AACf,cAAM;AAAA,UACJ;AAAA,UACA;AAAA,QACF,IAAI,KAAK,OAAO,MAAM;AACtB,cAAM,YAAY,QAAQ,QAAQ;AAClC,YAAI,CAAC,SAAS,QAAQ,OAAO,KAAK,SAAS,KAAK,MAAM;AACpD,iBAAO;AAAA,QACT;AACA,YAAI,aAAa,CAAC,QAAQ,OAAO,YAAY,QAAQ;AACnD,iBAAO,KAAK,OAAO,SAAS,WAAW;AAAA,QACzC;AACA,eAAO;AAAA,MACT;AAAA;AAAA,MAEA,OAAO,CAAC;AAAA,QACN;AAAA,MACF,MAAM;AACJ,YAAI,CAAC,KAAK,QAAQ,mBAAmB;AACnC,iBAAO;AAAA,QACT;AACA,cAAM;AAAA,UACJ;AAAA,QACF,IAAI;AACJ,cAAM;AAAA,UACJ;AAAA,QACF,IAAI;AACJ,cAAM;AAAA,UACJ;AAAA,UACA;AAAA,QACF,IAAI;AACJ,YAAI,CAAC,SAAS,MAAM,OAAO,SAAS,KAAK,MAAM;AAC7C,iBAAO;AAAA,QACT;AACA,cAAM,UAAU,MAAM,iBAAiB,MAAM,OAAO,WAAW;AAC/D,cAAM,wBAAwB,MAAM,OAAO,YAAY,SAAS,MAAM;AACtE,YAAI,CAAC,WAAW,CAAC,uBAAuB;AACtC,iBAAO;AAAA,QACT;AACA,eAAO,OAAO,MAAM,EAAE,QAAQ,CAAC;AAAA,UAC7B;AAAA,QACF,MAAM;AACJ,aAAG,OAAO,MAAM,MAAM,GAAG,MAAM,GAAG;AAClC,iBAAO;AAAA,QACT,CAAC,EAAE,SAAS,EAAE,IAAI;AAAA,MACpB;AAAA;AAAA,MAEA,WAAW,CAAC;AAAA,QACV;AAAA,MACF,MAAM;AACJ,YAAI,CAAC,KAAK,QAAQ,iBAAiB;AACjC,iBAAO;AAAA,QACT;AACA,cAAM;AAAA,UACJ;AAAA,QACF,IAAI;AACJ,cAAM;AAAA,UACJ;AAAA,UACA;AAAA,QACF,IAAI;AACJ,cAAM;AAAA,UACJ;AAAA,UACA;AAAA,QACF,IAAI;AACJ,YAAI,CAAC,SAAS,MAAM,OAAO,SAAS,KAAK,MAAM;AAC7C,iBAAO;AAAA,QACT;AACA,cAAM,UAAU,MAAM,iBAAiB,MAAM,OAAO,WAAW;AAC/D,YAAI,CAAC,SAAS;AACZ,iBAAO;AAAA,QACT;AACA,cAAM,QAAQ,MAAM,MAAM;AAC1B,YAAI,UAAU,QAAW;AACvB,iBAAO;AAAA,QACT;AACA,cAAM,YAAY,IAAI,OAAO,KAAK;AAClC,YAAI,WAAW;AACb,iBAAO,OAAO,SAAS,QAAQ,CAAC;AAAA,YAC9B;AAAA,UACF,MAAM;AACJ,eAAG,aAAa,UAAU,KAAK,IAAI,QAAQ,KAAK,CAAC,CAAC;AAClD,mBAAO;AAAA,UACT,CAAC;AAAA,QACH;AACA,eAAO,OAAO,SAAS,SAAS;AAAA,MAClC;AAAA,IACF;AAAA,EACF;AAAA,EACA,gBAAgB;AACd,WAAO,CAAC,uBAAuB;AAAA,MAC7B,MAAM;AAAA,MACN,MAAM,KAAK;AAAA,MACX,eAAe,YAAU;AAAA,QACvB,UAAU,MAAM,CAAC;AAAA,MACnB;AAAA,IACF,CAAC,GAAG,uBAAuB;AAAA,MACzB,MAAM;AAAA,MACN,MAAM,KAAK;AAAA,MACX,eAAe,YAAU;AAAA,QACvB,UAAU,MAAM,CAAC;AAAA,MACnB;AAAA,IACF,CAAC,CAAC;AAAA,EACJ;AAAA,EACA,wBAAwB;AACtB,WAAO;AAAA;AAAA;AAAA,MAGP,IAAI,OAAO;AAAA,QACT,KAAK,IAAI,UAAU,wBAAwB;AAAA,QAC3C,OAAO;AAAA,UACL,aAAa,CAAC,MAAM,UAAU;AAC5B,gBAAI,CAAC,MAAM,eAAe;AACxB,qBAAO;AAAA,YACT;AAEA,gBAAI,KAAK,OAAO,SAAS,KAAK,KAAK,IAAI,GAAG;AACxC,qBAAO;AAAA,YACT;AACA,kBAAM,OAAO,MAAM,cAAc,QAAQ,YAAY;AACrD,kBAAM,SAAS,MAAM,cAAc,QAAQ,oBAAoB;AAC/D,kBAAM,aAAa,SAAS,KAAK,MAAM,MAAM,IAAI;AACjD,kBAAM,WAAW,eAAe,QAAQ,eAAe,SAAS,SAAS,WAAW;AACpF,gBAAI,CAAC,QAAQ,CAAC,UAAU;AACtB,qBAAO;AAAA,YACT;AACA,kBAAM;AAAA,cACJ;AAAA,cACA;AAAA,YACF,IAAI,KAAK;AAIT,kBAAM,WAAW,OAAO,KAAK,KAAK,QAAQ,UAAU,IAAI,CAAC;AAGzD,eAAG,qBAAqB,KAAK,KAAK,OAAO;AAAA,cACvC;AAAA,YACF,GAAG,QAAQ,CAAC;AACZ,gBAAI,GAAG,UAAU,MAAM,OAAO,SAAS,KAAK,MAAM;AAEhD,iBAAG,aAAa,cAAc,KAAK,GAAG,IAAI,QAAQ,KAAK,IAAI,GAAG,GAAG,UAAU,OAAO,CAAC,CAAC,CAAC,CAAC;AAAA,YACxF;AAIA,eAAG,QAAQ,SAAS,IAAI;AACxB,iBAAK,SAAS,EAAE;AAChB,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IAAC;AAAA,EACJ;AACF,CAAC;",
  "names": []
}
